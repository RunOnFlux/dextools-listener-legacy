name: Deploy Prod tag

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      #     ECR_REPOSITORY: dextools-listener
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Deploy in EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOSTNAME: ${{ secrets.HOSTNAME }}
          USER_NAME: ${{ secrets.USER_NAME }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: dextools-listener
          IMAGE_TAG: ${{ github.sha }}

        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          export NEW_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo $ECR_REPOSITORY
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '

            #Now we have got the access of EC2 and we will start the deploy .
            cd ~
            echo "GETTING PREV IMAGE ID"
            PREV=$(sudo docker ps -lq)
            echo "PULL NEW ID"
            echo "$NEW_IMAGE"
            # sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            # echo "run new docker image"
            # sudo docker run -d --env-file env.list $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            # echo "stop previous image"
            # sudo docker stop $PREV
            # echo "remove prev image"
            # sudo docker rm $PREV
          '